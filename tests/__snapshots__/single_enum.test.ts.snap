// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`protoc-gen-elm generates the expected code for single_enum.proto 1`] = `
"{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Proto.SingleEnum exposing
    ( AnEnum(..)
    , anEnumDecoder
    , toAnEnumEncoder
    )

{-| ProtoBuf module: \`Proto.SingleEnum\`

This module was generated automatically using

  - [\`protoc-gen-elm\`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0
  - \`protoc\` 3.14.0
  - the following specification file: \`single_enum.proto\`

To run it use [\`elm-protocol-buffers\`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs AnEnum


# Decoder

@docs anEnumDecoder


# Encoder

@docs toAnEnumEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| \`AnEnum\` enumeration
-}
type AnEnum
    = OptionA
    | OptionB
    | OPTIONC
    | AnEnumUnrecognized_ Int



-- DECODER


anEnumDecoder : Decode.Decoder AnEnum
anEnumDecoder =
    Decode.int32
        |> Decode.map
            (\\\\value ->
                case value of
                    0 ->
                        OptionA

                    1 ->
                        OptionB

                    2 ->
                        OPTIONC

                    v ->
                        AnEnumUnrecognized_ v
            )



-- ENCODER


toAnEnumEncoder : AnEnum -> Encode.Encoder
toAnEnumEncoder value =
    Encode.int32 <|
        case value of
            OptionA ->
                0

            OptionB ->
                1

            OPTIONC ->
                2

            AnEnumUnrecognized_ v ->
                v



-- SETTERS



"
`;

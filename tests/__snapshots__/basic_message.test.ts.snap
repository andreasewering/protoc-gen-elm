// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`protoc-gen-elm generates the expected code for basic_message.proto 1`] = `
"{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Proto.BasicMessage exposing
    ( BasicMessage
    , basicMessageDecoder
    , toBasicMessageEncoder
    )

{-| ProtoBuf module: \`Proto.BasicMessage\`

This module was generated automatically using

  - [\`protoc-gen-elm\`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0
  - \`protoc\` 3.14.0
  - the following specification file: \`basic_message.proto\`

To run it use [\`elm-protocol-buffers\`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs BasicMessage


# Decoder

@docs basicMessageDecoder


# Encoder

@docs toBasicMessageEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| \`BasicMessage\` message
-}
type alias BasicMessage =
    { stringProperty : String
    , intProperty : Int
    , floatProperty : Float
    , boolProperty : Bool
    }



-- DECODER


{-| \`BasicMessage\` decoder
-}
basicMessageDecoder : Decode.Decoder BasicMessage
basicMessageDecoder =
    Decode.message (BasicMessage \\"\\" 0 0 False)
        [ Decode.optional 1 Decode.string setStringProperty
        , Decode.optional 2 Decode.int32 setIntProperty
        , Decode.optional 3 Decode.float setFloatProperty
        , Decode.optional 4 Decode.bool setBoolProperty
        ]



-- ENCODER


{-| \`BasicMessage\` encoder
-}
toBasicMessageEncoder : BasicMessage -> Encode.Encoder
toBasicMessageEncoder model =
    Encode.message
        [ ( 1, Encode.string model.stringProperty )
        , ( 2, Encode.int32 model.intProperty )
        , ( 3, Encode.float model.floatProperty )
        , ( 4, Encode.bool model.boolProperty )
        ]



-- SETTERS


setStringProperty : a -> { b | stringProperty : a } -> { b | stringProperty : a }
setStringProperty value model =
    { model | stringProperty = value }


setIntProperty : a -> { b | intProperty : a } -> { b | intProperty : a }
setIntProperty value model =
    { model | intProperty = value }


setFloatProperty : a -> { b | floatProperty : a } -> { b | floatProperty : a }
setFloatProperty value model =
    { model | floatProperty = value }


setBoolProperty : a -> { b | boolProperty : a } -> { b | boolProperty : a }
setBoolProperty value model =
    { model | boolProperty = value }
"
`;

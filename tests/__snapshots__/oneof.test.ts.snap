// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`protoc-gen-elm generates the expected code for oneof.proto 1`] = `
"{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Proto.Oneof exposing
    ( OneOfMsg(..), OneOf
    , oneOfDecoder
    , toOneOfEncoder
    )

{-| ProtoBuf module: \`Proto.Oneof\`

This module was generated automatically using

  - [\`protoc-gen-elm\`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0
  - \`protoc\` 3.14.0
  - the following specification file: \`oneof.proto\`

To run it use [\`elm-protocol-buffers\`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs OneOfMsg, OneOf


# Decoder

@docs oneOfDecoder


# Encoder

@docs toOneOfEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| OneOfMsg
-}
type OneOfMsg
    = MsgAString String
    | MsgAnInt Int
    | MsgABool Bool


{-| \`OneOf\` message
-}
type alias OneOf =
    { msg : Maybe OneOfMsg
    }



-- DECODER


{-| \`OneOf\` decoder
-}
oneOfDecoder : Decode.Decoder OneOf
oneOfDecoder =
    Decode.message (OneOf Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map MsgAString Decode.string )
            , ( 2, Decode.map MsgAnInt Decode.int32 )
            , ( 3, Decode.map MsgABool Decode.bool )
            ]
            setMsg
        ]



-- ENCODER


toOneOfMsgEncoder : OneOfMsg -> ( Int, Encode.Encoder )
toOneOfMsgEncoder model =
    case model of
        MsgAString value ->
            ( 1, Encode.string value )

        MsgAnInt value ->
            ( 2, Encode.int32 value )

        MsgABool value ->
            ( 3, Encode.bool value )


{-| \`OneOf\` encoder
-}
toOneOfEncoder : OneOf -> Encode.Encoder
toOneOfEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toOneOfMsgEncoder model.msg
        ]



-- SETTERS


setMsg : a -> { b | msg : a } -> { b | msg : a }
setMsg value model =
    { model | msg = value }
"
`;

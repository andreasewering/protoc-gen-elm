// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`protoc-plugin-elm generates expected code for basic_message.proto 1`] = `
"{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Proto.BasicMessage exposing
    ( BasicMessage
    , basicMessageDecoder
    , toBasicMessageEncoder
    )

{-| ProtoBuf module: \`Proto.BasicMessage\`

This module was generated automatically using

  - [\`protoc-gen-elm\`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - \`protoc\` 3.14.0
  - the following specification file: \`basic_message.proto\`

To run it use [\`elm-protocol-buffers\`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs BasicMessage


# Decoder

@docs basicMessageDecoder


# Encoder

@docs toBasicMessageEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| \`BasicMessage\` message
-}
type alias BasicMessage =
    { stringProperty : String
    , intProperty : Int
    , floatProperty : Float
    , boolProperty : Bool
    }



-- DECODER


{-| \`BasicMessage\` decoder
-}
basicMessageDecoder : Decode.Decoder BasicMessage
basicMessageDecoder =
    Decode.message (BasicMessage \\"\\" 0 0 False)
        [ Decode.optional 1 Decode.string setStringProperty
        , Decode.optional 2 Decode.int32 setIntProperty
        , Decode.optional 3 Decode.float setFloatProperty
        , Decode.optional 4 Decode.bool setBoolProperty
        ]



-- ENCODER


{-| \`BasicMessage\` encoder
-}
toBasicMessageEncoder : BasicMessage -> Encode.Encoder
toBasicMessageEncoder model =
    Encode.message
        [ ( 1, Encode.string model.stringProperty )
        , ( 2, Encode.int32 model.intProperty )
        , ( 3, Encode.float model.floatProperty )
        , ( 4, Encode.bool model.boolProperty )
        ]



-- SETTERS


setStringProperty : a -> { b | stringProperty : a } -> { b | stringProperty : a }
setStringProperty value model =
    { model | stringProperty = value }


setIntProperty : a -> { b | intProperty : a } -> { b | intProperty : a }
setIntProperty value model =
    { model | intProperty = value }


setFloatProperty : a -> { b | floatProperty : a } -> { b | floatProperty : a }
setFloatProperty value model =
    { model | floatProperty = value }


setBoolProperty : a -> { b | boolProperty : a } -> { b | boolProperty : a }
setBoolProperty value model =
    { model | boolProperty = value }
"
`;

exports[`protoc-plugin-elm generates expected code for oneof.proto 1`] = `
"{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Proto.Oneof exposing
    ( OneOfMsg(..), OneOf
    , oneOfDecoder
    , toOneOfEncoder
    )

{-| ProtoBuf module: \`Proto.Oneof\`

This module was generated automatically using

  - [\`protoc-gen-elm\`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - \`protoc\` 3.14.0
  - the following specification file: \`oneof.proto\`

To run it use [\`elm-protocol-buffers\`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs OneOfMsg, OneOf


# Decoder

@docs oneOfDecoder


# Encoder

@docs toOneOfEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| OneOfMsg
-}
type OneOfMsg
    = MsgAString String
    | MsgAnInt Int
    | MsgABool Bool


{-| \`OneOf\` message
-}
type alias OneOf =
    { msg : Maybe OneOfMsg
    }



-- DECODER


{-| \`OneOf\` decoder
-}
oneOfDecoder : Decode.Decoder OneOf
oneOfDecoder =
    Decode.message (OneOf Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map MsgAString Decode.string )
            , ( 2, Decode.map MsgAnInt Decode.int32 )
            , ( 3, Decode.map MsgABool Decode.bool )
            ]
            setMsg
        ]



-- ENCODER


toOneOfMsgEncoder : OneOfMsg -> ( Int, Encode.Encoder )
toOneOfMsgEncoder model =
    case model of
        MsgAString value ->
            ( 1, Encode.string value )

        MsgAnInt value ->
            ( 2, Encode.int32 value )

        MsgABool value ->
            ( 3, Encode.bool value )


{-| \`OneOf\` encoder
-}
toOneOfEncoder : OneOf -> Encode.Encoder
toOneOfEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toOneOfMsgEncoder model.msg
        ]



-- SETTERS


setMsg : a -> { b | msg : a } -> { b | msg : a }
setMsg value model =
    { model | msg = value }
"
`;

exports[`protoc-plugin-elm generates expected code for single_enum.proto 1`] = `
"{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Proto.SingleEnum exposing
    ( AnEnum(..)
    , anEnumDecoder
    , toAnEnumEncoder
    )

{-| ProtoBuf module: \`Proto.SingleEnum\`

This module was generated automatically using

  - [\`protoc-gen-elm\`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - \`protoc\` 3.14.0
  - the following specification file: \`single_enum.proto\`

To run it use [\`elm-protocol-buffers\`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs AnEnum


# Decoder

@docs anEnumDecoder


# Encoder

@docs toAnEnumEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| \`AnEnum\` enumeration
-}
type AnEnum
    = OptionA
    | OptionB
    | OPTIONC
    | AnEnumUnrecognized_ Int



-- DECODER


anEnumDecoder : Decode.Decoder AnEnum
anEnumDecoder =
    Decode.int32
        |> Decode.map
            (\\\\value ->
                case value of
                    0 ->
                        OptionA

                    1 ->
                        OptionB

                    2 ->
                        OPTIONC

                    v ->
                        AnEnumUnrecognized_ v
            )



-- ENCODER


toAnEnumEncoder : AnEnum -> Encode.Encoder
toAnEnumEncoder value =
    Encode.int32 <|
        case value of
            OptionA ->
                0

            OptionB ->
                1

            OPTIONC ->
                2

            AnEnumUnrecognized_ v ->
                v



-- SETTERS



"
`;

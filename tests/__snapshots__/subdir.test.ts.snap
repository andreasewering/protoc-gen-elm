// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`protoc-gen-elm generates the expected code for files in subdirectory 1`] = `
"{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Proto.Subdir.Imported exposing
    ( SubImported
    , subImportedDecoder
    , toSubImportedEncoder
    )

{-| ProtoBuf module: \`Proto.Subdir.Imported\`

This module was generated automatically using

  - [\`protoc-gen-elm\`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0
  - \`protoc\` 3.14.0
  - the following specification file: \`subdir/imported.proto\`

To run it use [\`elm-protocol-buffers\`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs SubImported


# Decoder

@docs subImportedDecoder


# Encoder

@docs toSubImportedEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| \`SubImported\` message
-}
type alias SubImported =
    { first : String
    , second : Bool
    }



-- DECODER


{-| \`SubImported\` decoder
-}
subImportedDecoder : Decode.Decoder SubImported
subImportedDecoder =
    Decode.message (SubImported \\"\\" False)
        [ Decode.optional 1 Decode.string setFirst
        , Decode.optional 2 Decode.bool setSecond
        ]



-- ENCODER


{-| \`SubImported\` encoder
-}
toSubImportedEncoder : SubImported -> Encode.Encoder
toSubImportedEncoder model =
    Encode.message
        [ ( 1, Encode.string model.first )
        , ( 2, Encode.bool model.second )
        ]



-- SETTERS


setFirst : a -> { b | first : a } -> { b | first : a }
setFirst value model =
    { model | first = value }


setSecond : a -> { b | second : a } -> { b | second : a }
setSecond value model =
    { model | second = value }

{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Proto.Subdir.Importing exposing
    ( Nested
    , nestedDecoder
    , toNestedEncoder
    )

{-| ProtoBuf module: \`Proto.Subdir.Importing\`

This module was generated automatically using

  - [\`protoc-gen-elm\`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0
  - \`protoc\` 3.14.0
  - the following specification file: \`subdir/importing.proto\`

To run it use [\`elm-protocol-buffers\`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs Nested


# Decoder

@docs nestedDecoder


# Encoder

@docs toNestedEncoder

-}

import Proto.Subdir.Imported exposing (..)
import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| \`Nested\` message
-}
type alias Nested =
    { normalProperty : String
    , nestedProperty : Maybe SubImported
    }



-- DECODER


{-| \`Nested\` decoder
-}
nestedDecoder : Decode.Decoder Nested
nestedDecoder =
    Decode.message (Nested \\"\\" Nothing)
        [ Decode.optional 1 Decode.string setNormalProperty
        , Decode.optional 2 (Decode.map Just subImportedDecoder) setNestedProperty
        ]



-- ENCODER


{-| \`Nested\` encoder
-}
toNestedEncoder : Nested -> Encode.Encoder
toNestedEncoder model =
    Encode.message
        [ ( 1, Encode.string model.normalProperty )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toSubImportedEncoder) model.nestedProperty )
        ]



-- SETTERS


setNormalProperty : a -> { b | normalProperty : a } -> { b | normalProperty : a }
setNormalProperty value model =
    { model | normalProperty = value }


setNestedProperty : a -> { b | nestedProperty : a } -> { b | nestedProperty : a }
setNestedProperty value model =
    { model | nestedProperty = value }
"
`;
